

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sat Oct 23 18:46:40 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  008F                     	;# 
    99  0090                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  0105                     	;# 
   118  0107                     	;# 
   119  0108                     	;# 
   120  0109                     	;# 
   121  010C                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0185                     	;# 
   127  0187                     	;# 
   128  0188                     	;# 
   129  0189                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  000E                     	;# 
   148  000F                     	;# 
   149  0010                     	;# 
   150  0011                     	;# 
   151  0012                     	;# 
   152  0013                     	;# 
   153  0014                     	;# 
   154  0015                     	;# 
   155  0015                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  001D                     	;# 
   165  001E                     	;# 
   166  001F                     	;# 
   167  0081                     	;# 
   168  0085                     	;# 
   169  0086                     	;# 
   170  0087                     	;# 
   171  0088                     	;# 
   172  0089                     	;# 
   173  008C                     	;# 
   174  008D                     	;# 
   175  008E                     	;# 
   176  008F                     	;# 
   177  0090                     	;# 
   178  0091                     	;# 
   179  0092                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0095                     	;# 
   185  0096                     	;# 
   186  0097                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  009F                     	;# 
   195  0105                     	;# 
   196  0107                     	;# 
   197  0108                     	;# 
   198  0109                     	;# 
   199  010C                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  010F                     	;# 
   204  0185                     	;# 
   205  0187                     	;# 
   206  0188                     	;# 
   207  0189                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210                           
   211                           	psect	strings
   212  0283                     __pstrings:
   213  0283                     stringtab:
   214  0283                     __stringtab:
   215  0283                     stringcode:	
   216                           ;	String table - string pointers are 1 byte each
   217                           
   218  0283                     stringdir:
   219  0283  3002               	movlw	high stringdir
   220  0284  008A               	movwf	10
   221  0285  0804               	movf	4,w
   222  0286  0A84               	incf	4,f
   223  0287  0782               	addwf	2,f
   224  0288                     __stringbase:
   225  0288  3400               	retlw	0
   226  0289                     __end_of__stringtab:
   227  0289                     _dpowers:
   228  0289  3401               	retlw	1
   229  028A  3400               	retlw	0
   230  028B  340A               	retlw	10
   231  028C  3400               	retlw	0
   232  028D  3464               	retlw	100
   233  028E  3400               	retlw	0
   234  028F  34E8               	retlw	232
   235  0290  3403               	retlw	3
   236  0291  3410               	retlw	16
   237  0292  3427               	retlw	39
   238  0293                     __end_of_dpowers:
   239  000B                     _INTCONbits	set	11
   240  0019                     _TXREG	set	25
   241  0018                     _RCSTAbits	set	24
   242  0065                     _RCIF	set	101
   243  0033                     _RB3	set	51
   244  0032                     _RB2	set	50
   245  0031                     _RB1	set	49
   246  0030                     _RB0	set	48
   247  0058                     _RBIF	set	88
   248  008C                     _PIE1bits	set	140
   249  0095                     _WPUB	set	149
   250  0096                     _IOCB	set	150
   251  0081                     _OPTION_REGbits	set	129
   252  008F                     _OSCCONbits	set	143
   253  0086                     _TRISB	set	134
   254  0085                     _TRISA	set	133
   255  0099                     _SPBRG	set	153
   256  0098                     _TXSTAbits	set	152
   257  04C5                     _TXEN	set	1221
   258  0189                     _ANSELH	set	393
   259  0188                     _ANSEL	set	392
   260  0187                     _BAUDCTLbits	set	391
   261  0293                     STR_1:
   262  0293  3425               	retlw	37	;'%'
   263  0294  3464               	retlw	100	;'d'
   264  0295  3400               	retlw	0
   265                           
   266                           	psect	cinit
   267  0015                     start_initialization:	
   268                           ; #config settings
   269                           
   270  0015                     __initialization:
   271                           
   272                           ; Clear objects allocated to BANK0
   273  0015  1283               	bcf	3,5	;RP0=0, select bank0
   274  0016  1303               	bcf	3,6	;RP1=0, select bank0
   275  0017  01BA               	clrf	__pbssBANK0& (0+127)
   276  0018  01BB               	clrf	(__pbssBANK0+1)& (0+127)
   277  0019  01BC               	clrf	(__pbssBANK0+2)& (0+127)
   278  001A  01BD               	clrf	(__pbssBANK0+3)& (0+127)
   279  001B  01BE               	clrf	(__pbssBANK0+4)& (0+127)
   280  001C  01BF               	clrf	(__pbssBANK0+5)& (0+127)
   281  001D  01C0               	clrf	(__pbssBANK0+6)& (0+127)
   282  001E  01C1               	clrf	(__pbssBANK0+7)& (0+127)
   283  001F                     end_of_initialization:	
   284                           ;End of C runtime variable initialization code
   285                           
   286  001F                     __end_of__initialization:
   287  001F  0183               	clrf	3
   288  0020  120A  118A  2A96   	ljmp	_main	;jump to C main() function
   289                           
   290                           	psect	bssBANK0
   291  003A                     __pbssBANK0:
   292  003A                     _tr:
   293  003A                     	ds	2
   294  003C                     _rc:
   295  003C                     	ds	2
   296  003E                     _frec:
   297  003E                     	ds	2
   298  0040                     _con:
   299  0040                     	ds	1
   300  0041                     _buffer:
   301  0041                     	ds	1
   302                           
   303                           	psect	cstackCOMMON
   304  0070                     __pcstackCOMMON:
   305  0070                     ?_isr:
   306  0070                     ?_setup:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_main:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?___lwdiv:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ___lwdiv@divisor:	
   316                           ; 2 bytes @ 0x0
   317                           
   318                           
   319                           ; 2 bytes @ 0x0
   320  0070                     	ds	2
   321  0072                     ___lwdiv@dividend:
   322                           
   323                           ; 2 bytes @ 0x2
   324  0072                     	ds	2
   325  0074                     ??___lwdiv:
   326                           
   327                           ; 1 bytes @ 0x4
   328  0074                     	ds	1
   329  0075                     ___lwdiv@quotient:
   330                           
   331                           ; 2 bytes @ 0x5
   332  0075                     	ds	2
   333  0077                     ___lwdiv@counter:
   334                           
   335                           ; 1 bytes @ 0x7
   336  0077                     	ds	1
   337  0078                     ?___lwmod:
   338  0078                     ___lwmod@divisor:	
   339                           ; 2 bytes @ 0x8
   340                           
   341                           
   342                           ; 2 bytes @ 0x8
   343  0078                     	ds	2
   344  007A                     ___lwmod@dividend:
   345                           
   346                           ; 2 bytes @ 0xA
   347  007A                     	ds	2
   348  007C                     ??___lwmod:
   349                           
   350                           ; 1 bytes @ 0xC
   351  007C                     	ds	1
   352  007D                     ___lwmod@counter:
   353                           
   354                           ; 1 bytes @ 0xD
   355  007D                     	ds	1
   356                           
   357                           	psect	cstackBANK0
   358  0020                     __pcstackBANK0:
   359  0020                     ?_sprintf:
   360  0020                     sprintf@f:	
   361                           ; 2 bytes @ 0x0
   362                           
   363                           
   364                           ; 1 bytes @ 0x0
   365  0020                     	ds	3
   366  0023                     ??_sprintf:
   367                           
   368                           ; 1 bytes @ 0x3
   369  0023                     	ds	3
   370  0026                     sprintf@ap:
   371                           
   372                           ; 1 bytes @ 0x6
   373  0026                     	ds	1
   374  0027                     sprintf@flag:
   375                           
   376                           ; 1 bytes @ 0x7
   377  0027                     	ds	1
   378  0028                     sprintf@prec:
   379                           
   380                           ; 1 bytes @ 0x8
   381  0028                     	ds	1
   382  0029                     sprintf@val:
   383                           
   384                           ; 2 bytes @ 0x9
   385  0029                     	ds	2
   386  002B                     sprintf@sp:
   387                           
   388                           ; 1 bytes @ 0xB
   389  002B                     	ds	1
   390  002C                     sprintf@c:
   391                           
   392                           ; 1 bytes @ 0xC
   393  002C                     	ds	1
   394  002D                     ??_isr:
   395                           
   396                           ; 1 bytes @ 0xD
   397  002D                     	ds	7
   398  0034                     ?_USART_CONFIG:
   399  0034                     USART_CONFIG@frec:	
   400                           ; 1 bytes @ 0x14
   401                           
   402                           
   403                           ; 2 bytes @ 0x14
   404  0034                     	ds	2
   405  0036                     USART_CONFIG@tr:
   406                           
   407                           ; 2 bytes @ 0x16
   408  0036                     	ds	2
   409  0038                     USART_CONFIG@rc:
   410                           
   411                           ; 2 bytes @ 0x18
   412  0038                     	ds	2
   413  003A                     ??_USART_CONFIG:
   414  003A                     ??_setup:	
   415                           ; 1 bytes @ 0x1A
   416                           
   417  003A                     ??_main:	
   418                           ; 1 bytes @ 0x1A
   419                           
   420                           
   421                           	psect	maintext
   422  0296                     __pmaintext:	
   423                           ; 1 bytes @ 0x1A
   424 ;;
   425 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   426 ;;
   427 ;; *************** function _main *****************
   428 ;; Defined at:
   429 ;;		line 125 in file "Control.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;		None
   432 ;; Auto vars:     Size  Location     Type
   433 ;;		None
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : B00/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   443 ;;      Params:         0       0       0       0       0
   444 ;;      Locals:         0       0       0       0       0
   445 ;;      Temps:          0       0       0       0       0
   446 ;;      Totals:         0       0       0       0       0
   447 ;;Total ram usage:        0 bytes
   448 ;; Hardware stack levels required when called:    5
   449 ;; This function calls:
   450 ;;		_setup
   451 ;; This function is called by:
   452 ;;		Startup code after reset
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           
   457                           ;psect for function _main
   458  0296                     _main:
   459  0296                     l1212:	
   460                           ;incstack = 0
   461                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   462                           
   463                           
   464                           ;Control.c: 126:     setup();
   465  0296  120A  118A  2250  120A  118A  	fcall	_setup
   466  029B                     l99:	
   467                           ;Control.c: 127:     while(1){
   468                           
   469  029B                     l100:	
   470                           ;Control.c: 129:     }
   471                           
   472  029B  2A9B               	goto	l99
   473  029C  120A  118A  2812   	ljmp	start
   474  029F                     __end_of_main:
   475                           
   476                           	psect	text1
   477  0250                     __ptext1:	
   478 ;; *************** function _setup *****************
   479 ;; Defined at:
   480 ;;		line 101 in file "Control.c"
   481 ;; Parameters:    Size  Location     Type
   482 ;;		None
   483 ;; Auto vars:     Size  Location     Type
   484 ;;		None
   485 ;; Return value:  Size  Location     Type
   486 ;;                  1    wreg      void 
   487 ;; Registers used:
   488 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   489 ;; Tracked objects:
   490 ;;		On entry : 0/0
   491 ;;		On exit  : 0/0
   492 ;;		Unchanged: 0/0
   493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   494 ;;      Params:         0       0       0       0       0
   495 ;;      Locals:         0       0       0       0       0
   496 ;;      Temps:          0       0       0       0       0
   497 ;;      Totals:         0       0       0       0       0
   498 ;;Total ram usage:        0 bytes
   499 ;; Hardware stack levels used:    1
   500 ;; Hardware stack levels required when called:    4
   501 ;; This function calls:
   502 ;;		_USART_CONFIG
   503 ;; This function is called by:
   504 ;;		_main
   505 ;; This function uses a non-reentrant model
   506 ;;
   507                           
   508                           
   509                           ;psect for function _setup
   510  0250                     _setup:
   511  0250                     l1132:	
   512                           ;incstack = 0
   513                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   514                           
   515                           
   516                           ;Control.c: 102:     ANSEL = 0x00;
   517  0250  1683               	bsf	3,5	;RP0=1, select bank3
   518  0251  1703               	bsf	3,6	;RP1=1, select bank3
   519  0252  0188               	clrf	8	;volatile
   520                           
   521                           ;Control.c: 103:     ANSELH = 0x00;
   522  0253  0189               	clrf	9	;volatile
   523  0254                     l1134:
   524                           
   525                           ;Control.c: 104:     TRISA = 0x01;
   526  0254  3001               	movlw	1
   527  0255  1683               	bsf	3,5	;RP0=1, select bank1
   528  0256  1303               	bcf	3,6	;RP1=0, select bank1
   529  0257  0085               	movwf	5	;volatile
   530  0258                     l1136:
   531                           
   532                           ;Control.c: 105:     TRISB = 0x0F;
   533  0258  300F               	movlw	15
   534  0259  0086               	movwf	6	;volatile
   535  025A                     l1138:
   536                           
   537                           ;Control.c: 107:     OSCCONbits.IRCF = 0B110;
   538  025A  080F               	movf	15,w	;volatile
   539  025B  398F               	andlw	-113
   540  025C  3860               	iorlw	96
   541  025D  008F               	movwf	15	;volatile
   542  025E                     l1140:
   543                           
   544                           ;Control.c: 108:     OSCCONbits.OSTS = 0;
   545  025E  118F               	bcf	15,3	;volatile
   546  025F                     l1142:
   547                           
   548                           ;Control.c: 109:     OSCCONbits.SCS = 1;
   549  025F  140F               	bsf	15,0	;volatile
   550  0260                     l1144:
   551                           
   552                           ;Control.c: 111:     OPTION_REGbits.nRBPU = 0;
   553  0260  1381               	bcf	1,7	;volatile
   554  0261                     l1146:
   555                           
   556                           ;Control.c: 112:     INTCONbits.RBIE = 1;
   557  0261  158B               	bsf	11,3	;volatile
   558  0262                     l1148:
   559                           
   560                           ;Control.c: 114:     IOCB = 0x0F;
   561  0262  300F               	movlw	15
   562  0263  0096               	movwf	22	;volatile
   563  0264                     l1150:
   564                           
   565                           ;Control.c: 115:     WPUB = 0x0F;
   566  0264  300F               	movlw	15
   567  0265  0095               	movwf	21	;volatile
   568  0266                     l1152:
   569                           
   570                           ;Control.c: 117:     USART_CONFIG(4, 1, 1);
   571  0266  3004               	movlw	4
   572  0267  1283               	bcf	3,5	;RP0=0, select bank0
   573  0268  1303               	bcf	3,6	;RP1=0, select bank0
   574  0269  00B4               	movwf	USART_CONFIG@frec
   575  026A  3000               	movlw	0
   576  026B  00B5               	movwf	USART_CONFIG@frec+1
   577  026C  3001               	movlw	1
   578  026D  00B6               	movwf	USART_CONFIG@tr
   579  026E  3000               	movlw	0
   580  026F  00B7               	movwf	USART_CONFIG@tr+1
   581  0270  3001               	movlw	1
   582  0271  00B8               	movwf	USART_CONFIG@rc
   583  0272  3000               	movlw	0
   584  0273  00B9               	movwf	USART_CONFIG@rc+1
   585  0274  120A  118A  218D  120A  118A  	fcall	_USART_CONFIG
   586  0279                     l1154:
   587                           
   588                           ;Control.c: 118:     INTCONbits.PEIE = 1;
   589  0279  170B               	bsf	11,6	;volatile
   590  027A                     l1156:
   591                           
   592                           ;Control.c: 119:     INTCONbits.GIE = 1;
   593  027A  178B               	bsf	11,7	;volatile
   594  027B                     l1158:
   595                           
   596                           ;Control.c: 120:     PIE1bits.RCIE = 1;
   597  027B  1683               	bsf	3,5	;RP0=1, select bank1
   598  027C  1303               	bcf	3,6	;RP1=0, select bank1
   599  027D  168C               	bsf	12,5	;volatile
   600  027E                     l1160:
   601                           
   602                           ;Control.c: 121:     RCIF = 0;
   603  027E  1283               	bcf	3,5	;RP0=0, select bank0
   604  027F  1303               	bcf	3,6	;RP1=0, select bank0
   605  0280  128C               	bcf	12,5	;volatile
   606  0281                     l1162:
   607                           
   608                           ;Control.c: 122:     con = 0x00;
   609  0281  01C0               	clrf	_con
   610  0282                     l94:
   611  0282  0008               	return
   612  0283                     __end_of_setup:
   613                           
   614                           	psect	text2
   615  018D                     __ptext2:	
   616 ;; *************** function _USART_CONFIG *****************
   617 ;; Defined at:
   618 ;;		line 33 in file "Control.c"
   619 ;; Parameters:    Size  Location     Type
   620 ;;  frec            2   20[BANK0 ] int 
   621 ;;  tr              2   22[BANK0 ] int 
   622 ;;  rc              2   24[BANK0 ] int 
   623 ;; Auto vars:     Size  Location     Type
   624 ;;		None
   625 ;; Return value:  Size  Location     Type
   626 ;;                  1    wreg      void 
   627 ;; Registers used:
   628 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   634 ;;      Params:         0       6       0       0       0
   635 ;;      Locals:         0       0       0       0       0
   636 ;;      Temps:          0       0       0       0       0
   637 ;;      Totals:         0       6       0       0       0
   638 ;;Total ram usage:        6 bytes
   639 ;; Hardware stack levels used:    1
   640 ;; Hardware stack levels required when called:    3
   641 ;; This function calls:
   642 ;;		Nothing
   643 ;; This function is called by:
   644 ;;		_setup
   645 ;; This function uses a non-reentrant model
   646 ;;
   647                           
   648                           
   649                           ;psect for function _USART_CONFIG
   650  018D                     _USART_CONFIG:
   651  018D                     l992:	
   652                           ;incstack = 0
   653                           ; Regs used in _USART_CONFIG: [wreg-fsr0h+status,2+status,0]
   654                           
   655                           
   656                           ;Control.c: 34:     RCSTAbits.SPEN = 1;
   657  018D  1283               	bcf	3,5	;RP0=0, select bank0
   658  018E  1303               	bcf	3,6	;RP1=0, select bank0
   659  018F  1798               	bsf	24,7	;volatile
   660                           
   661                           ;Control.c: 35:     TXSTAbits.SYNC = 0;
   662  0190  1683               	bsf	3,5	;RP0=1, select bank1
   663  0191  1303               	bcf	3,6	;RP1=0, select bank1
   664  0192  1218               	bcf	24,4	;volatile
   665                           
   666                           ;Control.c: 36:     TXSTAbits.TX9 = 0;
   667  0193  1318               	bcf	24,6	;volatile
   668                           
   669                           ;Control.c: 37:     RCSTAbits.RX9 = 0;
   670  0194  1283               	bcf	3,5	;RP0=0, select bank0
   671  0195  1303               	bcf	3,6	;RP1=0, select bank0
   672  0196  1318               	bcf	24,6	;volatile
   673                           
   674                           ;Control.c: 38:     switch(frec){
   675  0197  29AA               	goto	l1008
   676  0198                     l994:
   677                           
   678                           ;Control.c: 40:             SPBRG = 25;
   679  0198  3019               	movlw	25
   680  0199  1683               	bsf	3,5	;RP0=1, select bank1
   681  019A  1303               	bcf	3,6	;RP1=0, select bank1
   682  019B  0099               	movwf	25	;volatile
   683  019C                     l996:
   684                           
   685                           ;Control.c: 41:             TXSTAbits.BRGH = 1;
   686  019C  1518               	bsf	24,2	;volatile
   687  019D                     l998:
   688                           
   689                           ;Control.c: 42:             BAUDCTLbits.BRG16 = 0;
   690  019D  1683               	bsf	3,5	;RP0=1, select bank3
   691  019E  1703               	bsf	3,6	;RP1=1, select bank3
   692  019F  1187               	bcf	7,3	;volatile
   693                           
   694                           ;Control.c: 43:             break;
   695  01A0  29B7               	goto	l1010
   696  01A1                     l1000:
   697                           
   698                           ;Control.c: 45:             SPBRG = 12;
   699  01A1  300C               	movlw	12
   700  01A2  1683               	bsf	3,5	;RP0=1, select bank1
   701  01A3  1303               	bcf	3,6	;RP1=0, select bank1
   702  01A4  0099               	movwf	25	;volatile
   703  01A5                     l1002:
   704                           
   705                           ;Control.c: 46:             TXSTAbits.BRGH = 0;
   706  01A5  1118               	bcf	24,2	;volatile
   707  01A6                     l1004:
   708                           
   709                           ;Control.c: 47:             BAUDCTLbits.BRG16 = 0;
   710  01A6  1683               	bsf	3,5	;RP0=1, select bank3
   711  01A7  1703               	bsf	3,6	;RP1=1, select bank3
   712  01A8  1187               	bcf	7,3	;volatile
   713                           
   714                           ;Control.c: 48:             break;
   715  01A9  29B7               	goto	l1010
   716  01AA                     l1008:
   717                           
   718                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   719                           ; Switch size 1, requested type "simple"
   720                           ; Number of cases is 1, Range of values is 0 to 0
   721                           ; switch strategies available:
   722                           ; Name         Instructions Cycles
   723                           ; simple_byte            4     3 (average)
   724                           ; direct_byte           11     8 (fixed)
   725                           ; jumptable            260     6 (fixed)
   726                           ;	Chosen strategy is simple_byte
   727  01AA  0835               	movf	USART_CONFIG@frec+1,w
   728  01AB  3A00               	xorlw	0	; case 0
   729  01AC  1903               	skipnz
   730  01AD  29AF               	goto	l1254
   731  01AE  29B7               	goto	l1010
   732  01AF                     l1254:
   733                           
   734                           ; Switch size 1, requested type "simple"
   735                           ; Number of cases is 2, Range of values is 4 to 8
   736                           ; switch strategies available:
   737                           ; Name         Instructions Cycles
   738                           ; simple_byte            7     4 (average)
   739                           ; direct_byte           26    11 (fixed)
   740                           ; jumptable            263     9 (fixed)
   741                           ;	Chosen strategy is simple_byte
   742  01AF  0834               	movf	USART_CONFIG@frec,w
   743  01B0  3A04               	xorlw	4	; case 4
   744  01B1  1903               	skipnz
   745  01B2  2998               	goto	l994
   746  01B3  3A0C               	xorlw	12	; case 8
   747  01B4  1903               	skipnz
   748  01B5  29A1               	goto	l1000
   749  01B6  29B7               	goto	l1010
   750  01B7                     l1010:
   751                           
   752                           ;Control.c: 50:     if(tr==1){
   753  01B7  1283               	bcf	3,5	;RP0=0, select bank0
   754  01B8  1303               	bcf	3,6	;RP1=0, select bank0
   755  01B9  0336               	decf	USART_CONFIG@tr,w
   756  01BA  0437               	iorwf	USART_CONFIG@tr+1,w
   757  01BB  1D03               	btfss	3,2
   758  01BC  29BE               	goto	u461
   759  01BD  29BF               	goto	u460
   760  01BE                     u461:
   761  01BE  29C3               	goto	l63
   762  01BF                     u460:
   763  01BF                     l1012:
   764                           
   765                           ;Control.c: 51:         TXEN = 1;
   766  01BF  1683               	bsf	3,5	;RP0=1, select bank1
   767  01C0  1303               	bcf	3,6	;RP1=0, select bank1
   768  01C1  1698               	bsf	24,5	;volatile
   769                           
   770                           ;Control.c: 52:     }
   771  01C2  29C6               	goto	l1014
   772  01C3                     l63:	
   773                           ;Control.c: 53:     else{
   774                           
   775                           
   776                           ;Control.c: 54:         TXEN = 0;
   777  01C3  1683               	bsf	3,5	;RP0=1, select bank1
   778  01C4  1303               	bcf	3,6	;RP1=0, select bank1
   779  01C5  1298               	bcf	24,5	;volatile
   780  01C6                     l1014:
   781                           
   782                           ;Control.c: 56:     if(rc == 1){
   783  01C6  1283               	bcf	3,5	;RP0=0, select bank0
   784  01C7  1303               	bcf	3,6	;RP1=0, select bank0
   785  01C8  0338               	decf	USART_CONFIG@rc,w
   786  01C9  0439               	iorwf	USART_CONFIG@rc+1,w
   787  01CA  1D03               	btfss	3,2
   788  01CB  29CD               	goto	u471
   789  01CC  29CE               	goto	u470
   790  01CD                     u471:
   791  01CD  29D0               	goto	l65
   792  01CE                     u470:
   793  01CE                     l1016:
   794                           
   795                           ;Control.c: 57:         RCSTAbits.CREN = 1;
   796  01CE  1618               	bsf	24,4	;volatile
   797                           
   798                           ;Control.c: 58:     }
   799  01CF  29D1               	goto	l67
   800  01D0                     l65:	
   801                           ;Control.c: 59:     else{
   802                           
   803                           
   804                           ;Control.c: 60:         RCSTAbits.CREN = 0;
   805  01D0  1218               	bcf	24,4	;volatile
   806  01D1                     l67:
   807  01D1  0008               	return
   808  01D2                     __end_of_USART_CONFIG:
   809                           
   810                           	psect	text3
   811  010B                     __ptext3:	
   812 ;; *************** function _isr *****************
   813 ;; Defined at:
   814 ;;		line 78 in file "Control.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   828 ;;      Params:         0       0       0       0       0
   829 ;;      Locals:         0       0       0       0       0
   830 ;;      Temps:          0       7       0       0       0
   831 ;;      Totals:         0       7       0       0       0
   832 ;;Total ram usage:        7 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    2
   835 ;; This function calls:
   836 ;;		_sprintf
   837 ;; This function is called by:
   838 ;;		Interrupt level 1
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           
   843                           ;psect for function _isr
   844  010B                     _isr:
   845  010B                     i1l1164:
   846                           
   847                           ;Control.c: 79:     if(RBIF){
   848  010B  1C0B               	btfss	11,0	;volatile
   849  010C  290E               	goto	u68_21
   850  010D  290F               	goto	u68_20
   851  010E                     u68_21:
   852  010E  2980               	goto	i1l91
   853  010F                     u68_20:
   854  010F                     i1l1166:
   855                           
   856                           ;Control.c: 80:         if((RB0 == 0)&&(RB1 == 1)&&(RB2 == 1)&&(RB3 == 1)){
   857  010F  1806               	btfsc	6,0	;volatile
   858  0110  2912               	goto	u69_21
   859  0111  2913               	goto	u69_20
   860  0112                     u69_21:
   861  0112  2922               	goto	i1l82
   862  0113                     u69_20:
   863  0113                     i1l1168:
   864  0113  1C86               	btfss	6,1	;volatile
   865  0114  2916               	goto	u70_21
   866  0115  2917               	goto	u70_20
   867  0116                     u70_21:
   868  0116  2922               	goto	i1l82
   869  0117                     u70_20:
   870  0117                     i1l1170:
   871  0117  1D06               	btfss	6,2	;volatile
   872  0118  291A               	goto	u71_21
   873  0119  291B               	goto	u71_20
   874  011A                     u71_21:
   875  011A  2922               	goto	i1l82
   876  011B                     u71_20:
   877  011B                     i1l1172:
   878  011B  1D86               	btfss	6,3	;volatile
   879  011C  291E               	goto	u72_21
   880  011D  291F               	goto	u72_20
   881  011E                     u72_21:
   882  011E  2922               	goto	i1l82
   883  011F                     u72_20:
   884  011F                     i1l1174:
   885                           
   886                           ;Control.c: 81:             TXREG = 0x31;
   887  011F  3031               	movlw	49
   888  0120  0099               	movwf	25	;volatile
   889                           
   890                           ;Control.c: 82:         }
   891  0121  296E               	goto	i1l1208
   892  0122                     i1l82:	
   893                           ;Control.c: 83:         else if((RB0 == 1)&&(RB1 == 0)&&(RB2 == 1)&&(RB3 == 1)){
   894                           
   895  0122  1C06               	btfss	6,0	;volatile
   896  0123  2925               	goto	u73_21
   897  0124  2926               	goto	u73_20
   898  0125                     u73_21:
   899  0125  2935               	goto	i1l84
   900  0126                     u73_20:
   901  0126                     i1l1176:
   902  0126  1886               	btfsc	6,1	;volatile
   903  0127  2929               	goto	u74_21
   904  0128  292A               	goto	u74_20
   905  0129                     u74_21:
   906  0129  2935               	goto	i1l84
   907  012A                     u74_20:
   908  012A                     i1l1178:
   909  012A  1D06               	btfss	6,2	;volatile
   910  012B  292D               	goto	u75_21
   911  012C  292E               	goto	u75_20
   912  012D                     u75_21:
   913  012D  2935               	goto	i1l84
   914  012E                     u75_20:
   915  012E                     i1l1180:
   916  012E  1D86               	btfss	6,3	;volatile
   917  012F  2931               	goto	u76_21
   918  0130  2932               	goto	u76_20
   919  0131                     u76_21:
   920  0131  2935               	goto	i1l84
   921  0132                     u76_20:
   922  0132                     i1l1182:
   923                           
   924                           ;Control.c: 84:             TXREG = 0x32;
   925  0132  3032               	movlw	50
   926  0133  0099               	movwf	25	;volatile
   927                           
   928                           ;Control.c: 85:         }
   929  0134  296E               	goto	i1l1208
   930  0135                     i1l84:	
   931                           ;Control.c: 86:         else if((RB0 == 1)&&(RB1 == 1)&&(RB2 == 0)&&(RB3 == 1)){
   932                           
   933  0135  1C06               	btfss	6,0	;volatile
   934  0136  2938               	goto	u77_21
   935  0137  2939               	goto	u77_20
   936  0138                     u77_21:
   937  0138  2948               	goto	i1l86
   938  0139                     u77_20:
   939  0139                     i1l1184:
   940  0139  1C86               	btfss	6,1	;volatile
   941  013A  293C               	goto	u78_21
   942  013B  293D               	goto	u78_20
   943  013C                     u78_21:
   944  013C  2948               	goto	i1l86
   945  013D                     u78_20:
   946  013D                     i1l1186:
   947  013D  1906               	btfsc	6,2	;volatile
   948  013E  2940               	goto	u79_21
   949  013F  2941               	goto	u79_20
   950  0140                     u79_21:
   951  0140  2948               	goto	i1l86
   952  0141                     u79_20:
   953  0141                     i1l1188:
   954  0141  1D86               	btfss	6,3	;volatile
   955  0142  2944               	goto	u80_21
   956  0143  2945               	goto	u80_20
   957  0144                     u80_21:
   958  0144  2948               	goto	i1l86
   959  0145                     u80_20:
   960  0145                     i1l1190:
   961                           
   962                           ;Control.c: 87:             TXREG = 0x33;
   963  0145  3033               	movlw	51
   964  0146  0099               	movwf	25	;volatile
   965                           
   966                           ;Control.c: 88:         }
   967  0147  296E               	goto	i1l1208
   968  0148                     i1l86:	
   969                           ;Control.c: 89:         else if((RB0 == 1)&&(RB1 == 1)&&(RB2 == 1)&&(RB3 == 0)){
   970                           
   971  0148  1C06               	btfss	6,0	;volatile
   972  0149  294B               	goto	u81_21
   973  014A  294C               	goto	u81_20
   974  014B                     u81_21:
   975  014B  295B               	goto	i1l88
   976  014C                     u81_20:
   977  014C                     i1l1192:
   978  014C  1C86               	btfss	6,1	;volatile
   979  014D  294F               	goto	u82_21
   980  014E  2950               	goto	u82_20
   981  014F                     u82_21:
   982  014F  295B               	goto	i1l88
   983  0150                     u82_20:
   984  0150                     i1l1194:
   985  0150  1D06               	btfss	6,2	;volatile
   986  0151  2953               	goto	u83_21
   987  0152  2954               	goto	u83_20
   988  0153                     u83_21:
   989  0153  295B               	goto	i1l88
   990  0154                     u83_20:
   991  0154                     i1l1196:
   992  0154  1986               	btfsc	6,3	;volatile
   993  0155  2957               	goto	u84_21
   994  0156  2958               	goto	u84_20
   995  0157                     u84_21:
   996  0157  295B               	goto	i1l88
   997  0158                     u84_20:
   998  0158                     i1l1198:
   999                           
  1000                           ;Control.c: 90:             TXREG = 0x34;
  1001  0158  3034               	movlw	52
  1002  0159  0099               	movwf	25	;volatile
  1003                           
  1004                           ;Control.c: 91:         }
  1005  015A  296E               	goto	i1l1208
  1006  015B                     i1l88:	
  1007                           ;Control.c: 92:         else if((RB0 == 1)&&(RB1 == 1)&&(RB2 == 1)&&(RB3 == 1)){
  1008                           
  1009  015B  1C06               	btfss	6,0	;volatile
  1010  015C  295E               	goto	u85_21
  1011  015D  295F               	goto	u85_20
  1012  015E                     u85_21:
  1013  015E  296E               	goto	i1l85
  1014  015F                     u85_20:
  1015  015F                     i1l1200:
  1016  015F  1C86               	btfss	6,1	;volatile
  1017  0160  2962               	goto	u86_21
  1018  0161  2963               	goto	u86_20
  1019  0162                     u86_21:
  1020  0162  296E               	goto	i1l85
  1021  0163                     u86_20:
  1022  0163                     i1l1202:
  1023  0163  1D06               	btfss	6,2	;volatile
  1024  0164  2966               	goto	u87_21
  1025  0165  2967               	goto	u87_20
  1026  0166                     u87_21:
  1027  0166  296E               	goto	i1l85
  1028  0167                     u87_20:
  1029  0167                     i1l1204:
  1030  0167  1D86               	btfss	6,3	;volatile
  1031  0168  296A               	goto	u88_21
  1032  0169  296B               	goto	u88_20
  1033  016A                     u88_21:
  1034  016A  296E               	goto	i1l85
  1035  016B                     u88_20:
  1036  016B                     i1l1206:
  1037                           
  1038                           ;Control.c: 93:             TXREG = 0x30;
  1039  016B  3030               	movlw	48
  1040  016C  0099               	movwf	25	;volatile
  1041  016D  296E               	goto	i1l1208
  1042  016E                     i1l85:
  1043  016E                     i1l1208:
  1044                           
  1045                           ;Control.c: 95:         sprintf(buffer, "%d", con);
  1046  016E  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1047  016F  00AD               	movwf	??_isr
  1048  0170  082D               	movf	??_isr,w
  1049  0171  00A0               	movwf	sprintf@f
  1050  0172  0840               	movf	_con,w
  1051  0173  00AE               	movwf	??_isr+1
  1052  0174  01AF               	clrf	??_isr+2
  1053  0175  082E               	movf	??_isr+1,w
  1054  0176  00A1               	movwf	?_sprintf+1
  1055  0177  082F               	movf	??_isr+2,w
  1056  0178  00A2               	movwf	?_sprintf+2
  1057  0179  3041               	movlw	(low (_buffer| 0))& (0+255)
  1058  017A  120A  118A  2023  120A  118A  	fcall	_sprintf
  1059  017F                     i1l1210:
  1060                           
  1061                           ;Control.c: 97:         RBIF = 0;
  1062  017F  100B               	bcf	11,0	;volatile
  1063  0180                     i1l91:
  1064  0180  1283               	bcf	3,5	;RP0=0, select bank0
  1065  0181  1303               	bcf	3,6	;RP1=0, select bank0
  1066  0182  0833               	movf	??_isr+6,w
  1067  0183  00FF               	movwf	btemp+1
  1068  0184  0832               	movf	??_isr+5,w
  1069  0185  008A               	movwf	10
  1070  0186  0831               	movf	??_isr+4,w
  1071  0187  0084               	movwf	4
  1072  0188  0E30               	swapf	??_isr+3,w
  1073  0189  0083               	movwf	3
  1074  018A  0EFE               	swapf	btemp,f
  1075  018B  0E7E               	swapf	btemp,w
  1076  018C  0009               	retfie
  1077  018D                     __end_of_isr:
  1078                           
  1079                           	psect	intentry
  1080  0004                     __pintentry:	
  1081                           ;incstack = 0
  1082                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1083                           
  1084  0004                     interrupt_function:
  1085  007E                     saved_w	set	btemp
  1086  0004  00FE               	movwf	btemp
  1087  0005  0E03               	swapf	3,w
  1088  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1089  0007  1303               	bcf	3,6	;RP1=0, select bank0
  1090  0008  00B0               	movwf	??_isr+3
  1091  0009  0804               	movf	4,w
  1092  000A  00B1               	movwf	??_isr+4
  1093  000B  080A               	movf	10,w
  1094  000C  00B2               	movwf	??_isr+5
  1095  000D  087F               	movf	btemp+1,w
  1096  000E  00B3               	movwf	??_isr+6
  1097  000F  120A  118A  290B   	ljmp	_isr
  1098                           
  1099                           	psect	text4
  1100  0023                     __ptext4:	
  1101 ;; *************** function _sprintf *****************
  1102 ;; Defined at:
  1103 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  1104 ;; Parameters:    Size  Location     Type
  1105 ;;  sp              1    wreg     PTR unsigned char 
  1106 ;;		 -> buffer(1), 
  1107 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1108 ;;		 -> STR_1(3), 
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1111 ;;		 -> buffer(1), 
  1112 ;;  tmpval          4    0        struct .
  1113 ;;  val             2    9[BANK0 ] unsigned int 
  1114 ;;  cp              2    0        PTR const unsigned char 
  1115 ;;  len             2    0        unsigned int 
  1116 ;;  c               1   12[BANK0 ] unsigned char 
  1117 ;;  prec            1    8[BANK0 ] char 
  1118 ;;  flag            1    7[BANK0 ] unsigned char 
  1119 ;;  ap              1    6[BANK0 ] PTR void [1]
  1120 ;;		 -> ?_sprintf(2), 
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  2    0[BANK0 ] int 
  1123 ;; Registers used:
  1124 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1130 ;;      Params:         0       3       0       0       0
  1131 ;;      Locals:         0       7       0       0       0
  1132 ;;      Temps:          0       3       0       0       0
  1133 ;;      Totals:         0      13       0       0       0
  1134 ;;Total ram usage:       13 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:    1
  1137 ;; This function calls:
  1138 ;;		___lwdiv
  1139 ;;		___lwmod
  1140 ;; This function is called by:
  1141 ;;		_isr
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144                           
  1145                           
  1146                           ;psect for function _sprintf
  1147  0023                     _sprintf:
  1148                           
  1149                           ;incstack = 0
  1150                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1151                           ;sprintf@sp stored from wreg
  1152  0023  1283               	bcf	3,5	;RP0=0, select bank0
  1153  0024  1303               	bcf	3,6	;RP1=0, select bank0
  1154  0025  00AB               	movwf	sprintf@sp
  1155  0026                     i1l1070:
  1156                           
  1157                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1158  0026  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1159  0027  00A3               	movwf	??_sprintf
  1160  0028  0823               	movf	??_sprintf,w
  1161  0029  00A6               	movwf	sprintf@ap
  1162                           
  1163                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1164  002A  28F4               	goto	i1l1122
  1165  002B                     i1l1072:
  1166                           
  1167                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1168  002B  3025               	movlw	37
  1169  002C  062C               	xorwf	sprintf@c,w
  1170  002D  1903               	btfsc	3,2
  1171  002E  2830               	goto	u61_21
  1172  002F  2831               	goto	u61_20
  1173  0030                     u61_21:
  1174  0030  283D               	goto	i1l1078
  1175  0031                     u61_20:
  1176  0031                     i1l1074:
  1177                           
  1178                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1179  0031  082C               	movf	sprintf@c,w
  1180  0032  00A3               	movwf	??_sprintf
  1181  0033  082B               	movf	sprintf@sp,w
  1182  0034  0084               	movwf	4
  1183  0035  0823               	movf	??_sprintf,w
  1184  0036  1383               	bcf	3,7	;select IRP bank0
  1185  0037  0080               	movwf	0
  1186  0038                     i1l1076:
  1187  0038  3001               	movlw	1
  1188  0039  00A3               	movwf	??_sprintf
  1189  003A  0823               	movf	??_sprintf,w
  1190  003B  07AB               	addwf	sprintf@sp,f
  1191                           
  1192                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  1193  003C  28F4               	goto	i1l1122
  1194  003D                     i1l1078:
  1195                           
  1196                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1197  003D  01A7               	clrf	sprintf@flag
  1198  003E                     i1l1082:	
  1199                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1200                           
  1201  003E  3001               	movlw	1
  1202  003F  07A0               	addwf	sprintf@f,f
  1203  0040  30FF               	movlw	-1
  1204  0041  0720               	addwf	sprintf@f,w
  1205  0042  0084               	movwf	4
  1206  0043  120A  118A  2283  120A  118A  	fcall	stringdir
  1207  0048  00AC               	movwf	sprintf@c
  1208  0049  00A3               	movwf	??_sprintf
  1209  004A  01A4               	clrf	??_sprintf+1
  1210                           
  1211                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1212                           ; Switch size 1, requested type "simple"
  1213                           ; Number of cases is 1, Range of values is 0 to 0
  1214                           ; switch strategies available:
  1215                           ; Name         Instructions Cycles
  1216                           ; simple_byte            4     3 (average)
  1217                           ; direct_byte           11     8 (fixed)
  1218                           ; jumptable            260     6 (fixed)
  1219                           ;	Chosen strategy is simple_byte
  1220  004B  0824               	movf	??_sprintf+1,w
  1221  004C  3A00               	xorlw	0	; case 0
  1222  004D  1903               	skipnz
  1223  004E  2850               	goto	i1l1256
  1224  004F  28F4               	goto	i1l1122
  1225  0050                     i1l1256:
  1226                           
  1227                           ; Switch size 1, requested type "simple"
  1228                           ; Number of cases is 3, Range of values is 0 to 105
  1229                           ; switch strategies available:
  1230                           ; Name         Instructions Cycles
  1231                           ; simple_byte           10     6 (average)
  1232                           ; jumptable            260     6 (fixed)
  1233                           ;	Chosen strategy is simple_byte
  1234  0050  0823               	movf	??_sprintf,w
  1235  0051  3A00               	xorlw	0	; case 0
  1236  0052  1903               	skipnz
  1237  0053  2906               	goto	i1l1124
  1238  0054  3A64               	xorlw	100	; case 100
  1239  0055  1903               	skipnz
  1240  0056  285B               	goto	i1l1084
  1241  0057  3A0D               	xorlw	13	; case 105
  1242  0058  1903               	skipnz
  1243  0059  285B               	goto	i1l1084
  1244  005A  28F4               	goto	i1l1122
  1245  005B                     i1l1084:
  1246                           
  1247                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1248  005B  0826               	movf	sprintf@ap,w
  1249  005C  0084               	movwf	4
  1250  005D  1383               	bcf	3,7	;select IRP bank0
  1251  005E  0800               	movf	0,w
  1252  005F  00A9               	movwf	sprintf@val
  1253  0060  0A84               	incf	4,f
  1254  0061  0800               	movf	0,w
  1255  0062  00AA               	movwf	sprintf@val+1
  1256  0063                     i1l1086:
  1257  0063  3002               	movlw	2
  1258  0064  00A3               	movwf	??_sprintf
  1259  0065  0823               	movf	??_sprintf,w
  1260  0066  07A6               	addwf	sprintf@ap,f
  1261  0067                     i1l1088:
  1262                           
  1263                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1264  0067  1FAA               	btfss	sprintf@val+1,7
  1265  0068  286A               	goto	u62_21
  1266  0069  286B               	goto	u62_20
  1267  006A                     u62_21:
  1268  006A  2874               	goto	i1l1094
  1269  006B                     u62_20:
  1270  006B                     i1l1090:
  1271                           
  1272                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1273  006B  3003               	movlw	3
  1274  006C  00A3               	movwf	??_sprintf
  1275  006D  0823               	movf	??_sprintf,w
  1276  006E  04A7               	iorwf	sprintf@flag,f
  1277  006F                     i1l1092:
  1278                           
  1279                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1280  006F  09A9               	comf	sprintf@val,f
  1281  0070  09AA               	comf	sprintf@val+1,f
  1282  0071  0AA9               	incf	sprintf@val,f
  1283  0072  1903               	skipnz
  1284  0073  0AAA               	incf	sprintf@val+1,f
  1285  0074                     i1l1094:
  1286                           
  1287                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1288  0074  01AC               	clrf	sprintf@c
  1289  0075  0AAC               	incf	sprintf@c,f
  1290  0076                     i1l1100:
  1291                           
  1292                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1293  0076  082C               	movf	sprintf@c,w
  1294  0077  00A3               	movwf	??_sprintf
  1295  0078  0723               	addwf	??_sprintf,w
  1296  0079  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1297  007A  0084               	movwf	4
  1298  007B  120A  118A  2283  120A  118A  	fcall	stringdir
  1299  0080  00A4               	movwf	??_sprintf+1
  1300  0081  120A  118A  2283  120A  118A  	fcall	stringdir
  1301  0086  00A5               	movwf	??_sprintf+2
  1302  0087  0825               	movf	??_sprintf+2,w
  1303  0088  022A               	subwf	sprintf@val+1,w
  1304  0089  1D03               	skipz
  1305  008A  288D               	goto	u63_25
  1306  008B  0824               	movf	??_sprintf+1,w
  1307  008C  0229               	subwf	sprintf@val,w
  1308  008D                     u63_25:
  1309  008D  1803               	skipnc
  1310  008E  2890               	goto	u63_21
  1311  008F  2891               	goto	u63_20
  1312  0090                     u63_21:
  1313  0090  2892               	goto	i1l1104
  1314  0091                     u63_20:
  1315  0091  289C               	goto	i1l1106
  1316  0092                     i1l1104:
  1317  0092  3001               	movlw	1
  1318  0093  00A3               	movwf	??_sprintf
  1319  0094  0823               	movf	??_sprintf,w
  1320  0095  07AC               	addwf	sprintf@c,f
  1321  0096  3005               	movlw	5
  1322  0097  062C               	xorwf	sprintf@c,w
  1323  0098  1D03               	btfss	3,2
  1324  0099  289B               	goto	u64_21
  1325  009A  289C               	goto	u64_20
  1326  009B                     u64_21:
  1327  009B  2876               	goto	i1l1100
  1328  009C                     u64_20:
  1329  009C                     i1l1106:
  1330                           
  1331                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1332  009C  0827               	movf	sprintf@flag,w
  1333  009D  3903               	andlw	3
  1334  009E  1903               	btfsc	3,2
  1335  009F  28A1               	goto	u65_21
  1336  00A0  28A2               	goto	u65_20
  1337  00A1                     u65_21:
  1338  00A1  28AD               	goto	i1l1112
  1339  00A2                     u65_20:
  1340  00A2                     i1l1108:
  1341                           
  1342                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1343  00A2  302D               	movlw	45
  1344  00A3  00A3               	movwf	??_sprintf
  1345  00A4  082B               	movf	sprintf@sp,w
  1346  00A5  0084               	movwf	4
  1347  00A6  0823               	movf	??_sprintf,w
  1348  00A7  1383               	bcf	3,7	;select IRP bank0
  1349  00A8  0080               	movwf	0
  1350  00A9                     i1l1110:
  1351  00A9  3001               	movlw	1
  1352  00AA  00A3               	movwf	??_sprintf
  1353  00AB  0823               	movf	??_sprintf,w
  1354  00AC  07AB               	addwf	sprintf@sp,f
  1355  00AD                     i1l1112:
  1356                           
  1357                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1358  00AD  082C               	movf	sprintf@c,w
  1359  00AE  00A3               	movwf	??_sprintf
  1360  00AF  0823               	movf	??_sprintf,w
  1361  00B0  00A8               	movwf	sprintf@prec
  1362                           
  1363                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1364  00B1  28EB               	goto	i1l1120
  1365  00B2                     i1l1114:
  1366                           
  1367                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1368  00B2  300A               	movlw	10
  1369  00B3  00F8               	movwf	___lwmod@divisor
  1370  00B4  3000               	movlw	0
  1371  00B5  00F9               	movwf	___lwmod@divisor+1
  1372  00B6  0828               	movf	sprintf@prec,w
  1373  00B7  00A3               	movwf	??_sprintf
  1374  00B8  0723               	addwf	??_sprintf,w
  1375  00B9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1376  00BA  0084               	movwf	4
  1377  00BB  120A  118A  2283  120A  118A  	fcall	stringdir
  1378  00C0  00F0               	movwf	___lwdiv@divisor
  1379  00C1  120A  118A  2283  120A  118A  	fcall	stringdir
  1380  00C6  00F1               	movwf	___lwdiv@divisor+1
  1381  00C7  082A               	movf	sprintf@val+1,w
  1382  00C8  00F3               	movwf	___lwdiv@dividend+1
  1383  00C9  0829               	movf	sprintf@val,w
  1384  00CA  00F2               	movwf	___lwdiv@dividend
  1385  00CB  120A  118A  21D2  120A  118A  	fcall	___lwdiv
  1386  00D0  0871               	movf	?___lwdiv+1,w
  1387  00D1  00FB               	movwf	___lwmod@dividend+1
  1388  00D2  0870               	movf	?___lwdiv,w
  1389  00D3  00FA               	movwf	___lwmod@dividend
  1390  00D4  120A  118A  2216  120A  118A  	fcall	___lwmod
  1391  00D9  0878               	movf	?___lwmod,w
  1392  00DA  3E30               	addlw	48
  1393  00DB  1283               	bcf	3,5	;RP0=0, select bank0
  1394  00DC  1303               	bcf	3,6	;RP1=0, select bank0
  1395  00DD  00A4               	movwf	??_sprintf+1
  1396  00DE  0824               	movf	??_sprintf+1,w
  1397  00DF  00AC               	movwf	sprintf@c
  1398  00E0                     i1l1116:
  1399                           
  1400                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1401  00E0  082C               	movf	sprintf@c,w
  1402  00E1  00A3               	movwf	??_sprintf
  1403  00E2  082B               	movf	sprintf@sp,w
  1404  00E3  0084               	movwf	4
  1405  00E4  0823               	movf	??_sprintf,w
  1406  00E5  1383               	bcf	3,7	;select IRP bank0
  1407  00E6  0080               	movwf	0
  1408  00E7                     i1l1118:
  1409  00E7  3001               	movlw	1
  1410  00E8  00A3               	movwf	??_sprintf
  1411  00E9  0823               	movf	??_sprintf,w
  1412  00EA  07AB               	addwf	sprintf@sp,f
  1413  00EB                     i1l1120:
  1414                           
  1415                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1416  00EB  30FF               	movlw	255
  1417  00EC  00A3               	movwf	??_sprintf
  1418  00ED  0823               	movf	??_sprintf,w
  1419  00EE  07A8               	addwf	sprintf@prec,f
  1420  00EF  0A28               	incf	sprintf@prec,w
  1421  00F0  1D03               	btfss	3,2
  1422  00F1  28F3               	goto	u66_21
  1423  00F2  28F4               	goto	u66_20
  1424  00F3                     u66_21:
  1425  00F3  28B2               	goto	i1l1114
  1426  00F4                     u66_20:
  1427  00F4                     i1l1122:
  1428                           
  1429                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1430  00F4  3001               	movlw	1
  1431  00F5  07A0               	addwf	sprintf@f,f
  1432  00F6  30FF               	movlw	-1
  1433  00F7  0720               	addwf	sprintf@f,w
  1434  00F8  0084               	movwf	4
  1435  00F9  120A  118A  2283  120A  118A  	fcall	stringdir
  1436  00FE  00A3               	movwf	??_sprintf
  1437  00FF  0823               	movf	??_sprintf,w
  1438  0100  00AC               	movwf	sprintf@c
  1439  0101  082C               	movf	sprintf@c,w
  1440  0102  1D03               	btfss	3,2
  1441  0103  2905               	goto	u67_21
  1442  0104  2906               	goto	u67_20
  1443  0105                     u67_21:
  1444  0105  282B               	goto	i1l1072
  1445  0106                     u67_20:
  1446  0106                     i1l1124:
  1447                           
  1448                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1449  0106  082B               	movf	sprintf@sp,w
  1450  0107  0084               	movwf	4
  1451  0108  1383               	bcf	3,7	;select IRP bank0
  1452  0109  0180               	clrf	0
  1453  010A                     i1l212:
  1454  010A  0008               	return
  1455  010B                     __end_of_sprintf:
  1456                           
  1457                           	psect	text5
  1458  0216                     __ptext5:	
  1459 ;; *************** function ___lwmod *****************
  1460 ;; Defined at:
  1461 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;  divisor         2    8[COMMON] unsigned int 
  1464 ;;  dividend        2   10[COMMON] unsigned int 
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  counter         1   13[COMMON] unsigned char 
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  2    8[COMMON] unsigned int 
  1469 ;; Registers used:
  1470 ;;		wreg, status,2, status,0
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1476 ;;      Params:         4       0       0       0       0
  1477 ;;      Locals:         1       0       0       0       0
  1478 ;;      Temps:          1       0       0       0       0
  1479 ;;      Totals:         6       0       0       0       0
  1480 ;;Total ram usage:        6 bytes
  1481 ;; Hardware stack levels used:    1
  1482 ;; This function calls:
  1483 ;;		Nothing
  1484 ;; This function is called by:
  1485 ;;		_sprintf
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           
  1490                           ;psect for function ___lwmod
  1491  0216                     ___lwmod:
  1492  0216                     i1l1048:	
  1493                           ;incstack = 0
  1494                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1495                           
  1496  0216  0878               	movf	___lwmod@divisor,w
  1497  0217  0479               	iorwf	___lwmod@divisor+1,w
  1498  0218  1903               	btfsc	3,2
  1499  0219  2A1B               	goto	u55_21
  1500  021A  2A1C               	goto	u55_20
  1501  021B                     u55_21:
  1502  021B  2A4B               	goto	i1l1066
  1503  021C                     u55_20:
  1504  021C                     i1l1050:
  1505  021C  01FD               	clrf	___lwmod@counter
  1506  021D  0AFD               	incf	___lwmod@counter,f
  1507  021E  2A2A               	goto	i1l1056
  1508  021F                     i1l1052:
  1509  021F  3001               	movlw	1
  1510  0220                     u56_25:
  1511  0220  1003               	clrc
  1512  0221  0DF8               	rlf	___lwmod@divisor,f
  1513  0222  0DF9               	rlf	___lwmod@divisor+1,f
  1514  0223  3EFF               	addlw	-1
  1515  0224  1D03               	skipz
  1516  0225  2A20               	goto	u56_25
  1517  0226                     i1l1054:
  1518  0226  3001               	movlw	1
  1519  0227  00FC               	movwf	??___lwmod
  1520  0228  087C               	movf	??___lwmod,w
  1521  0229  07FD               	addwf	___lwmod@counter,f
  1522  022A                     i1l1056:
  1523  022A  1FF9               	btfss	___lwmod@divisor+1,7
  1524  022B  2A2D               	goto	u57_21
  1525  022C  2A2E               	goto	u57_20
  1526  022D                     u57_21:
  1527  022D  2A1F               	goto	i1l1052
  1528  022E                     u57_20:
  1529  022E                     i1l1058:
  1530  022E  0879               	movf	___lwmod@divisor+1,w
  1531  022F  027B               	subwf	___lwmod@dividend+1,w
  1532  0230  1D03               	skipz
  1533  0231  2A34               	goto	u58_25
  1534  0232  0878               	movf	___lwmod@divisor,w
  1535  0233  027A               	subwf	___lwmod@dividend,w
  1536  0234                     u58_25:
  1537  0234  1C03               	skipc
  1538  0235  2A37               	goto	u58_21
  1539  0236  2A38               	goto	u58_20
  1540  0237                     u58_21:
  1541  0237  2A3E               	goto	i1l1062
  1542  0238                     u58_20:
  1543  0238                     i1l1060:
  1544  0238  0878               	movf	___lwmod@divisor,w
  1545  0239  02FA               	subwf	___lwmod@dividend,f
  1546  023A  0879               	movf	___lwmod@divisor+1,w
  1547  023B  1C03               	skipc
  1548  023C  03FB               	decf	___lwmod@dividend+1,f
  1549  023D  02FB               	subwf	___lwmod@dividend+1,f
  1550  023E                     i1l1062:
  1551  023E  3001               	movlw	1
  1552  023F                     u59_25:
  1553  023F  1003               	clrc
  1554  0240  0CF9               	rrf	___lwmod@divisor+1,f
  1555  0241  0CF8               	rrf	___lwmod@divisor,f
  1556  0242  3EFF               	addlw	-1
  1557  0243  1D03               	skipz
  1558  0244  2A3F               	goto	u59_25
  1559  0245                     i1l1064:
  1560  0245  3001               	movlw	1
  1561  0246  02FD               	subwf	___lwmod@counter,f
  1562  0247  1D03               	btfss	3,2
  1563  0248  2A4A               	goto	u60_21
  1564  0249  2A4B               	goto	u60_20
  1565  024A                     u60_21:
  1566  024A  2A2E               	goto	i1l1058
  1567  024B                     u60_20:
  1568  024B                     i1l1066:
  1569  024B  087B               	movf	___lwmod@dividend+1,w
  1570  024C  00F9               	movwf	?___lwmod+1
  1571  024D  087A               	movf	___lwmod@dividend,w
  1572  024E  00F8               	movwf	?___lwmod
  1573  024F                     i1l498:
  1574  024F  0008               	return
  1575  0250                     __end_of___lwmod:
  1576                           
  1577                           	psect	text6
  1578  01D2                     __ptext6:	
  1579 ;; *************** function ___lwdiv *****************
  1580 ;; Defined at:
  1581 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1582 ;; Parameters:    Size  Location     Type
  1583 ;;  divisor         2    0[COMMON] unsigned int 
  1584 ;;  dividend        2    2[COMMON] unsigned int 
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;  quotient        2    5[COMMON] unsigned int 
  1587 ;;  counter         1    7[COMMON] unsigned char 
  1588 ;; Return value:  Size  Location     Type
  1589 ;;                  2    0[COMMON] unsigned int 
  1590 ;; Registers used:
  1591 ;;		wreg, status,2, status,0
  1592 ;; Tracked objects:
  1593 ;;		On entry : 0/0
  1594 ;;		On exit  : 0/0
  1595 ;;		Unchanged: 0/0
  1596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1597 ;;      Params:         4       0       0       0       0
  1598 ;;      Locals:         3       0       0       0       0
  1599 ;;      Temps:          1       0       0       0       0
  1600 ;;      Totals:         8       0       0       0       0
  1601 ;;Total ram usage:        8 bytes
  1602 ;; Hardware stack levels used:    1
  1603 ;; This function calls:
  1604 ;;		Nothing
  1605 ;; This function is called by:
  1606 ;;		_sprintf
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           
  1611                           ;psect for function ___lwdiv
  1612  01D2                     ___lwdiv:
  1613  01D2                     i1l1022:	
  1614                           ;incstack = 0
  1615                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1616                           
  1617  01D2  01F5               	clrf	___lwdiv@quotient
  1618  01D3  01F6               	clrf	___lwdiv@quotient+1
  1619  01D4                     i1l1024:
  1620  01D4  0870               	movf	___lwdiv@divisor,w
  1621  01D5  0471               	iorwf	___lwdiv@divisor+1,w
  1622  01D6  1903               	btfsc	3,2
  1623  01D7  29D9               	goto	u48_21
  1624  01D8  29DA               	goto	u48_20
  1625  01D9                     u48_21:
  1626  01D9  2A11               	goto	i1l1044
  1627  01DA                     u48_20:
  1628  01DA                     i1l1026:
  1629  01DA  01F7               	clrf	___lwdiv@counter
  1630  01DB  0AF7               	incf	___lwdiv@counter,f
  1631  01DC  29E8               	goto	i1l1032
  1632  01DD                     i1l1028:
  1633  01DD  3001               	movlw	1
  1634  01DE                     u49_25:
  1635  01DE  1003               	clrc
  1636  01DF  0DF0               	rlf	___lwdiv@divisor,f
  1637  01E0  0DF1               	rlf	___lwdiv@divisor+1,f
  1638  01E1  3EFF               	addlw	-1
  1639  01E2  1D03               	skipz
  1640  01E3  29DE               	goto	u49_25
  1641  01E4                     i1l1030:
  1642  01E4  3001               	movlw	1
  1643  01E5  00F4               	movwf	??___lwdiv
  1644  01E6  0874               	movf	??___lwdiv,w
  1645  01E7  07F7               	addwf	___lwdiv@counter,f
  1646  01E8                     i1l1032:
  1647  01E8  1FF1               	btfss	___lwdiv@divisor+1,7
  1648  01E9  29EB               	goto	u50_21
  1649  01EA  29EC               	goto	u50_20
  1650  01EB                     u50_21:
  1651  01EB  29DD               	goto	i1l1028
  1652  01EC                     u50_20:
  1653  01EC                     i1l1034:
  1654  01EC  3001               	movlw	1
  1655  01ED                     u51_25:
  1656  01ED  1003               	clrc
  1657  01EE  0DF5               	rlf	___lwdiv@quotient,f
  1658  01EF  0DF6               	rlf	___lwdiv@quotient+1,f
  1659  01F0  3EFF               	addlw	-1
  1660  01F1  1D03               	skipz
  1661  01F2  29ED               	goto	u51_25
  1662  01F3  0871               	movf	___lwdiv@divisor+1,w
  1663  01F4  0273               	subwf	___lwdiv@dividend+1,w
  1664  01F5  1D03               	skipz
  1665  01F6  29F9               	goto	u52_25
  1666  01F7  0870               	movf	___lwdiv@divisor,w
  1667  01F8  0272               	subwf	___lwdiv@dividend,w
  1668  01F9                     u52_25:
  1669  01F9  1C03               	skipc
  1670  01FA  29FC               	goto	u52_21
  1671  01FB  29FD               	goto	u52_20
  1672  01FC                     u52_21:
  1673  01FC  2A04               	goto	i1l1040
  1674  01FD                     u52_20:
  1675  01FD                     i1l1036:
  1676  01FD  0870               	movf	___lwdiv@divisor,w
  1677  01FE  02F2               	subwf	___lwdiv@dividend,f
  1678  01FF  0871               	movf	___lwdiv@divisor+1,w
  1679  0200  1C03               	skipc
  1680  0201  03F3               	decf	___lwdiv@dividend+1,f
  1681  0202  02F3               	subwf	___lwdiv@dividend+1,f
  1682  0203                     i1l1038:
  1683  0203  1475               	bsf	___lwdiv@quotient,0
  1684  0204                     i1l1040:
  1685  0204  3001               	movlw	1
  1686  0205                     u53_25:
  1687  0205  1003               	clrc
  1688  0206  0CF1               	rrf	___lwdiv@divisor+1,f
  1689  0207  0CF0               	rrf	___lwdiv@divisor,f
  1690  0208  3EFF               	addlw	-1
  1691  0209  1D03               	skipz
  1692  020A  2A05               	goto	u53_25
  1693  020B                     i1l1042:
  1694  020B  3001               	movlw	1
  1695  020C  02F7               	subwf	___lwdiv@counter,f
  1696  020D  1D03               	btfss	3,2
  1697  020E  2A10               	goto	u54_21
  1698  020F  2A11               	goto	u54_20
  1699  0210                     u54_21:
  1700  0210  29EC               	goto	i1l1034
  1701  0211                     u54_20:
  1702  0211                     i1l1044:
  1703  0211  0876               	movf	___lwdiv@quotient+1,w
  1704  0212  00F1               	movwf	?___lwdiv+1
  1705  0213  0875               	movf	___lwdiv@quotient,w
  1706  0214  00F0               	movwf	?___lwdiv
  1707  0215                     i1l488:
  1708  0215  0008               	return
  1709  0216                     __end_of___lwdiv:
  1710  007E                     btemp	set	126	;btemp
  1711  007E                     wtemp0	set	126
  1712                           
  1713                           	psect	config
  1714                           
  1715                           ;Config register CONFIG1 @ 0x2007
  1716                           ;	Oscillator Selection bits
  1717                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1718                           ;	Watchdog Timer Enable bit
  1719                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1720                           ;	Power-up Timer Enable bit
  1721                           ;	PWRTE = ON, PWRT enabled
  1722                           ;	RE3/MCLR pin function select bit
  1723                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1724                           ;	Code Protection bit
  1725                           ;	CP = OFF, Program memory code protection is disabled
  1726                           ;	Data Code Protection bit
  1727                           ;	CPD = OFF, Data memory code protection is disabled
  1728                           ;	Brown Out Reset Selection bits
  1729                           ;	BOREN = OFF, BOR disabled
  1730                           ;	Internal External Switchover bit
  1731                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1732                           ;	Fail-Safe Clock Monitor Enabled bit
  1733                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1734                           ;	Low Voltage Programming Enable bit
  1735                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1736                           ;	In-Circuit Debugger Mode bit
  1737                           ;	DEBUG = 0x1, unprogrammed default
  1738  2007                     	org	8199
  1739  2007  20C4               	dw	8388
  1740                           
  1741                           ;Config register CONFIG2 @ 0x2008
  1742                           ;	Brown-out Reset Selection bit
  1743                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1744                           ;	Flash Program Memory Self Write Enable bits
  1745                           ;	WRT = OFF, Write protection off
  1746  2008                     	org	8200
  1747  2008  3FFF               	dw	16383

Data Sizes:
    Strings     3
    Constant    10
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     26      34
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 1
		 -> buffer(BANK0[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _setup->_USART_CONFIG

Critical Paths under _isr in BANK0

    _isr->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     294
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     294
                       _USART_CONFIG
 ---------------------------------------------------------------------------------
 (2) _USART_CONFIG                                         6     0      6     294
                                             20 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  7     7      0    1211
                                             13 BANK0      7     7      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _USART_CONFIG

 _isr (ROOT)
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      30       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1A      22       5       42.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      30      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sat Oct 23 18:46:40 2021

                      pc 0002                       l63 01C3                       l65 01D0  
                     l67 01D1                       l94 0282                       l99 029B  
                     _rc 003C                       _tr 003A                       fsr 0004  
                    l100 029B                      l992 018D                      l994 0198  
                    l996 019C                      l998 019D                      _RB0 0030  
                    _RB1 0031                      _RB2 0032                      _RB3 0033  
                    u460 01BF                      u461 01BE                      u470 01CE  
                    u471 01CD                      _con 0040                      _isr 010B  
                    fsr0 0004                      indf 0000                     l1000 01A1  
                   l1002 01A5                     l1010 01B7                     l1012 01BF  
                   l1004 01A6                     l1014 01C6                     l1016 01CE  
                   l1008 01AA                     l1140 025E                     l1132 0250  
                   l1212 0296                     l1150 0264                     l1142 025F  
                   l1134 0254                     l1160 027E                     l1152 0266  
                   l1144 0260                     l1136 0258                     l1162 0281  
                   l1154 0279                     l1146 0261                     l1138 025A  
                   l1156 027A                     l1148 0262                     l1254 01AF  
                   l1158 027B                     ?_isr 0070                     STR_1 0293  
                   _IOCB 0096                     _RBIF 0058                     _RCIF 0065  
                   i1l82 0122                     i1l91 0180                     i1l84 0135  
                   i1l85 016E                     i1l86 0148                     i1l88 015B  
                   _TXEN 04C5                     _WPUB 0095                     _frec 003E  
                   _main 0296                     btemp 007E                     start 0012  
                  ??_isr 002D                    ?_main 0070                    _ANSEL 0188  
        __end_of___lwdiv 0216                    i1l212 010A          __end_of___lwmod 0250  
                  i1l488 0215                    i1l498 024F                    u50_20 01EC  
                  u50_21 01EB                    _SPBRG 0099                    u51_25 01ED  
                  u52_20 01FD                    u60_20 024B                    u52_21 01FC  
                  u60_21 024A                    u52_25 01F9                    u61_20 0031  
                  u61_21 0030                    u53_25 0205                    u54_20 0211  
                  u62_20 006B                    u70_20 0117                    u54_21 0210  
                  u62_21 006A                    u70_21 0116                    u55_20 021C  
                  u63_20 0091                    u71_20 011B                    u55_21 021B  
                  u63_21 0090                    u71_21 011A                    u63_25 008D  
                  u48_20 01DA                    u64_20 009C                    u80_20 0145  
                  u72_20 011F                    u48_21 01D9                    u64_21 009B  
                  u80_21 0144                    u72_21 011E                    u56_25 0220  
                  u57_20 022E                    u65_20 00A2                    u81_20 014C  
                  u73_20 0126                    u57_21 022D                    u65_21 00A1  
                  u81_21 014B                    u73_21 0125                    _TRISA 0085  
                  _TRISB 0086                    u49_25 01DE                    u58_20 0238  
                  u66_20 00F4                    u82_20 0150                    u74_20 012A  
                  u58_21 0237                    u66_21 00F3                    u82_21 014F  
                  u74_21 0129                    u58_25 0234                    u67_20 0106  
                  u83_20 0154                    u75_20 012E                    u67_21 0105  
                  u83_21 0153                    u75_21 012D                    u59_25 023F  
                  u84_20 0158                    u76_20 0132                    u68_20 010F  
                  u84_21 0157                    u76_21 0131                    u68_21 010E  
                  u85_20 015F                    u77_20 0139                    u69_20 0113  
                  u85_21 015E                    u77_21 0138                    u69_21 0112  
                  u86_20 0163                    u78_20 013D                    u86_21 0162  
                  u78_21 013C                    u87_20 0167                    u79_20 0141  
                  u87_21 0166                    u79_21 0140                    u88_20 016B  
                  u88_21 016A                    _TXREG 0019         USART_CONFIG@frec 0034  
        __end_of_dpowers 0293                    _setup 0250                    pclath 000A  
                  status 0003                    wtemp0 007E          __end_of_sprintf 010B  
        __initialization 0015             __end_of_main 029F                   ??_main 003A  
                 ?_setup 0070                   _ANSELH 0189                   i1l1100 0076  
                 i1l1030 01E4                   i1l1022 01D2                   i1l1110 00A9  
                 i1l1040 0204                   i1l1032 01E8                   i1l1024 01D4  
                 i1l1120 00EB                   i1l1112 00AD                   i1l1104 0092  
                 i1l1200 015F                   i1l1042 020B                   i1l1034 01EC  
                 i1l1026 01DA                   i1l1050 021C                   i1l1114 00B2  
                 i1l1106 009C                   i1l1122 00F4                   i1l1210 017F  
                 i1l1202 0163                   i1l1036 01FD                   i1l1028 01DD  
                 i1l1044 0211                   i1l1060 0238                   i1l1052 021F  
                 i1l1116 00E0                   i1l1108 00A2                   i1l1124 0106  
                 i1l1204 0167                   i1l1038 0203                   i1l1062 023E  
                 i1l1054 0226                   i1l1118 00E7                   i1l1070 0026  
                 i1l1206 016B                   i1l1064 0245                   i1l1056 022A  
                 i1l1048 0216                   i1l1072 002B                   i1l1208 016E  
                 i1l1058 022E                   i1l1066 024B                   i1l1090 006B  
                 i1l1082 003E                   i1l1074 0031                   i1l1170 0117  
                 i1l1092 006F                   i1l1084 005B                   i1l1076 0038  
                 i1l1180 012E                   i1l1172 011B                   i1l1164 010B  
                 i1l1094 0074                   i1l1086 0063                   i1l1078 003D  
                 i1l1190 0145                   i1l1182 0132                   i1l1174 011F  
                 i1l1166 010F                   i1l1088 0067                   i1l1256 0050  
                 i1l1192 014C                   i1l1184 0139                   i1l1176 0126  
                 i1l1168 0113                   i1l1194 0150                   i1l1186 013D  
                 i1l1178 012A                   i1l1196 0154                   i1l1188 0141  
                 i1l1198 0158                ??___lwdiv 0074                ??___lwmod 007C  
                 _buffer 0041                   saved_w 007E                ??_sprintf 0023  
__end_of__initialization 001F           __pcstackCOMMON 0070           USART_CONFIG@rc 0038  
         USART_CONFIG@tr 0036            __end_of_setup 0283           _OPTION_REGbits 0081  
                ??_setup 003A               __pbssBANK0 003A               __pmaintext 0296  
             __pintentry 0004               __stringtab 0283                  ___lwdiv 01D2  
                ___lwmod 0216                  __ptext1 0250                  __ptext2 018D  
                __ptext3 010B                  __ptext4 0023                  __ptext5 0216  
                __ptext6 01D2                  _dpowers 0289             __size_of_isr 0082  
                _sprintf 0023     end_of_initialization 001F                _RCSTAbits 0018  
          ?_USART_CONFIG 0034                _TXSTAbits 0098              _BAUDCTLbits 0187  
         ??_USART_CONFIG 003A      start_initialization 0015              __end_of_isr 018D  
              ___latbits 0002            __pcstackBANK0 0020              sprintf@flag 0027  
            sprintf@prec 0028         ___lwdiv@dividend 0072                 ?___lwdiv 0070  
               ?___lwmod 0078                __pstrings 0283         ___lwdiv@quotient 0075  
               ?_sprintf 0020           __size_of_setup 0033        interrupt_function 0004  
               _PIE1bits 008C     __end_of_USART_CONFIG 01D2              __stringbase 0288  
       __size_of___lwdiv 0044         __size_of___lwmod 003A       __end_of__stringtab 0289  
             sprintf@val 0029          ___lwdiv@divisor 0070          ___lwdiv@counter 0077  
       __size_of_sprintf 00E8            __size_of_main 0009               _INTCONbits 000B  
               intlevel1 0000                sprintf@ap 0026                sprintf@sp 002B  
  __size_of_USART_CONFIG 0045         ___lwmod@dividend 007A                stringcode 0283  
             _OSCCONbits 008F                 sprintf@c 002C                 sprintf@f 0020  
        ___lwmod@divisor 0078          ___lwmod@counter 007D                 stringdir 0283  
               stringtab 0283             _USART_CONFIG 018D  
